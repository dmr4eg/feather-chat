openapi: 3.0.3
info:
  title: Chat API
  description: API for chat application
  version: 1.0.0

servers:
  - url: http://localhost:8080

tags:
  - name: auth
    description: Authentication
  - name: users-groups
    description: User management
  - name: messages
    description: Message management

paths:
  /auth:
    post:
      summary: Login
      tags:
        - auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Login"
      responses:
        "401":
          $ref: "#/components/responses/UnauthorizedLoginError"
        "200":
          $ref: "#/components/responses/AuthorizationSuccess"
    delete:
      summary: Logout
      tags:
        - auth
      responses:
        "400":
          $ref: "#/components/responses/BadRequest"
        "200":
          $ref: "#/components/responses/UnauthorizationSuccess"

  /users:
    post:
      tags:
        - users-groups
      summary: Register user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "406":
          $ref: "#/components/responses/NotAcceptable"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "201":
          $ref: "#/components/responses/AuthorizationSuccess"
    put:
      summary: Update user
      tags:
        - users-groups
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "406":
          $ref: "#/components/responses/NotAcceptable"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "400":
          $ref: "#/components/responses/BadRequest"
        "202":
          description: Accepted
    get:
      summary: Get user info
      tags:
        - users-groups
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/id"
      responses:
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "400":
          $ref: "#/components/responses/BadRequest"
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"

    delete:
      summary: Delete user
      tags:
        - users-groups
      security:
        - bearerAuth: []
      responses:
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "400":
          $ref: "#/components/responses/BadRequest"
        "200":
          description: OK
          headers:
            Location:
              $ref: "#/components/headers/LoginRedirect"

  /groups:
    post:
      summary: Create group
      tags:
        - users-groups
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Group"
      responses:
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "400":
          $ref: "#/components/responses/BadRequest"
        "200":
          description: OK
    put:
      summary: Update group
      tags:
        - users-groups
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/id"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Group"
      responses:
        "202":
          description: Accepted
        "401":
          description: Unauthorized JWT
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
    get:
      summary: Get group info
      tags:
        - users-groups
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/id"
      responses:
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "400":
          $ref: "#/components/responses/BadRequest"
        "200":
          description: OK
    delete:
      summary: Delete group
      tags:
        - users-groups
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/id"
      responses:
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "400":
          $ref: "#/components/responses/BadRequest"
        "200":
          description: OK

  /chats:
    get:
      summary: List chats
      tags:
        - users-groups
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/offset"
      responses:
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "400":
          $ref: "#/components/responses/BadRequest"
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: integer
                  description: list of chat IDs

  /messages:
    post:
      summary: Send message
      tags:
        - messages
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Message"
      responses:
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "400":
          $ref: "#/components/responses/BadRequest"
        "200":
          description: OK
    put:
      summary: Update message
      tags:
        - messages
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Message"
      responses:
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "400":
          $ref: "#/components/responses/BadRequest"
        "200":
          description: OK
    get:
      summary: Get messages
      tags:
        - messages
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/messageId"
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/offset"
      responses:
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "400":
          $ref: "#/components/responses/BadRequest"
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Message"
    delete:
      summary: Delete message
      tags:
        - messages
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/messageId"
      responses:
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "400":
          $ref: "#/components/responses/BadRequest"
        "200":
          description: OK

components:
  securitySchemes:
    bearerAuth:
      description: JWT token
      type: http
      scheme: bearer
      bearerFormat: JWT

  parameters:
    id:
      name: id
      description: ID of the user or group
      example: 123
      in: query
      required: true
      schema:
        type: string
    messageId:
      name: messageId
      description: ID of the message
      example: { "chatId": 123, "senderId": 456, "timestamp": 1627846382000 }
      in: query
      required: true
      schema:
        $ref: "#/components/schemas/MessageId"
    limit:
      name: limit
      description: Limit of the list
      example: 10
      in: query
      required: true
      schema:
        type: integer
    offset:
      name: offset
      description: Offset of the list
      example: 0
      in: query
      required: true
      schema:
        type: integer

  schemas:
    chatId:
      type: integer
      format: int64
      description: ID of the chat
      example: 123

    userId:
      type: integer
      format: int64
      description: ID of the user
      example: 456

    timestamp:
      type: integer
      format: int64
      description: Timestamp of the message
      example: 1627846382000

    Error:
      type: object
      description: Error object
      example: {"message": "Error message"}
      properties:
        message:
          description: Error message
          example: "Error message"
          type: string

    Login:
      type: object
      description: Login object
      example: {"username": "user", "password": "password"}
      properties:
        username:
          type: string
        password:
          type: string

    User:
      type: object
      description: User object
      example: {"userId": 123, "name": "User name", "phone": "+1234567890"}
      properties:
        userId:
          $ref: "#/components/schemas/userId"
          description: ID of the user
          example: 123
        name:
          type: string
        phone:
          type: string

    Group:
      type: object
      description: Group object
      example: {"groupId": 123, "chatId": 456, "ownerId": 789, "name": "Group name"}
      properties:
        groupId:
          description: ID of the group
          example: 123
          type: integer
          format: int64
        chatId:
          $ref: "#/components/schemas/chatId"
          description: ID of the chat
          example: 456
        ownerId:
          $ref: "#/components/schemas/userId"
          description: ID of the owner
          example: 789
        name:
          type: string

    MessageId:
      type: object
      description: Message ID object
      example: {"chatId": 123, "senderId": 456, "timestamp": 1627846382000}
      properties:
        chatId:
          $ref: "#/components/schemas/chatId"
          description: ID of the chat
          example: 123
        senderId:
          $ref: "#/components/schemas/userId"
          description: ID of the sender
          example: 456
        timestamp:
          $ref: "#/components/schemas/timestamp"
          description: Timestamp of the message
          example: 1627846382000
      required:
        - chatId
        - senderId
        - timestamp
    Message:
      type: object
      description: Message object
      example: {"id": {"chatId": 123, "senderId": 456, "timestamp": 1627846382000}, "state": "SENT", "text": "Hello, world!"}
      properties:
        id:
          $ref: "#/components/schemas/MessageId"
          description: ID of the message
          example: { "chatId": 123, "senderId": 456, "timestamp": 1627846382000 }
          readOnly: true
        state:
          description: Current state of the message
          example: "RECEIVED"
          type: string
          enum:
            - "SENT"
            - "RECEIVED"
            - "READ"
            - "EDITED"
            - "DELETED"
        text:
          type: string
          description: Text of the message
          example: "Hello, world!"
      required:
        - id
        - state
        - text

  headers:
    Set-JWT:
      schema:
        type: string
        description: JWT token
        example: "jwt=tokenValue; Path=/; HttpOnly; Secure"
    Clear-JWT:
      schema:
        type: string
        description: JWT token clear
        example: "jwt=; Expires=Thu, 01 Jan 1970 00:00:00 GMT; Path=/;"
    HomeRedirect:
      schema:
        type: string
        description: Home redirect
        example: /
    LoginRedirect:
      schema:
        type: string
        description: Login redirect
        example: /auth/login

  responses:
    UnauthorizedLoginError:
      description: Unauthorized login
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    UnauthorizedError:
      description: Unauthorized access
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    AuthorizationSuccess:
      description: OK
      headers:
        Set-Cookie:
          $ref: "#/components/headers/Set-JWT"
        Location:
          $ref: "#/components/headers/HomeRedirect"
    UnauthorizationSuccess:
      description: OK
      headers:
        Set-Cookie:
          $ref: "#/components/headers/Clear-JWT"
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    NotAcceptable:
      description: Not Acceptable
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
