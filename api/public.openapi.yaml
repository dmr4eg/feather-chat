openapi: 3.0.3
info:
  title: Chat API
  description: API for chat application
  version: 1.0.0

servers:
  - url: http://localhost:8080

tags:
  - name: auth
    description: Authentication
  - name: users-groups
    description: User management
  - name: messages
    description: Message management

components:
  securitySchemes:
    bearerAuth:
      description: JWT token
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    userName:
      description: User name
      example: qwerty
      type: string

    userUUID:
      description: ID of the user
      type: string
      format: uuid
      example: 665c599d-5c8d-4d20-aaab-7ffaba150606

    chatUUID:
      description: ID of the chat
      type: string
      format: uuid
      example: 665c599d-5c8d-4d20-aaab-7ffaba150606

    timestamp:
      description: Timestamp of the message
      type: integer
      format: int64
      example: 1627846382000

    Error:
      type: object
      description: Error object
      example: { "message": "Error message" }
      properties:
        message:
          description: Error message
          example: "Error message"
          type: string

    AuthRecord:
      type: object
      description: Auth object
      example:
        {
          "userUUID": "665c599d-5c8d-4d20-aaab-7ffaba150606",
          "userHash": "wewefwefwef",
        }
      properties:
        userUUID:
          $ref: "#/components/schemas/userUUID"
        userHash:
          description: "SHA-256 hash"
          type: string
      required:
        - userUUID
        - userHash

    User:
      type: object
      description: User object
      example:
        {
          "id": "665c599d-5c8d-4d20-aaab-7ffaba150606",
          "name": "User name",
          "phone": "+1234567890",
        }
      properties:
        id:
          $ref: "#/components/schemas/userUUID"
        name:
          $ref: "#/components/schemas/userName"
        phone:
          type: string
          example: "+1234567890"
      required:
        - name
        - phone

    Chat:
      type: object
      description: Chat object
      properties:
        id:
          $ref: "#/components/schemas/chatUUID"
        type:
          description: Type of the chat
          example: "PRIVATE"
          type: string
          enum:
            - "PRIVATE"
            - "GROUP"
      required:
        - type

    Membership:
      type: object
      description: user membership object
      properties:
        chatUUID:
          $ref: "#/components/schemas/chatUUID"
        userUUID:
          $ref: "#/components/schemas/userUUID"
      required:
        - chatUUID
        - userUUID

    Group:
      type: object
      description: Group object
      example:
        {
          "chatUUID": "665c599d-5c8d-4d20-aaab-7ffaba150606",
          "ownerUUID": "665c599d-5c8d-4d20-aaab-7ffaba150606",
          "name": "Group name",
        }
      properties:
        chatUUID:
          $ref: "#/components/schemas/chatUUID"
        ownerUUID:
          $ref: "#/components/schemas/userUUID"
        name:
          type: string
      required:
        - ownerUUID
        - name

    MembershipCache:
      type: object
      description: user membership cache object
      properties:
        chatUUID:
          $ref: "#/components/schemas/chatUUID"
        userUUID:
          $ref: "#/components/schemas/userUUID"
        ttl:
          description: Time To Live
          type: integer
          format: int64
          example: 1627846382000
      required:
        - chatUUID
        - userUUID
        - ttl

    MessageId:
      type: object
      description: Message ID object
      example:
        {
          "chatUUID": "665c599d-5c8d-4d20-aaab-7ffaba150606",
          "senderUUID": "665c599d-5c8d-4d20-aaab-7ffaba150606",
          "timestamp": 1627846382000,
        }
      properties:
        chatUUID:
          $ref: "#/components/schemas/chatUUID"
        senderUUID:
          $ref: "#/components/schemas/userUUID"
        timestamp:
          $ref: "#/components/schemas/timestamp"
      required:
        - chatUUID
        - senderUUID
        - timestamp

    Message:
      type: object
      description: Message object
      example:
        {
          "id":
            {
              "chatUUID": "665c599d-5c8d-4d20-aaab-7ffaba150606",
              "senderUUID": "665c599d-5c8d-4d20-aaab-7ffaba150606",
              "timestamp": 1627846382000,
            },
          "state": "SENT",
          "text": "Hello, world!",
        }
      properties:
        id:
          $ref: "#/components/schemas/MessageId"
          readOnly: true
        state:
          description: Current state of the message
          example: "RECEIVED"
          type: string
          enum:
            - "SENT"
            - "RECEIVED"
            - "READ"
            - "EDITED"
        text:
          type: string
          description: Text of the message
          example: "Hello, world!"
      required:
        - id
        - state
        - text

  parameters:
    userUUID_path:
      name: userUUID
      description: UUID of the user
      example: "83ff0131-25ca-4583-9b9d-e3900039b17d"
      in: path
      required: true
      schema:
        $ref: "#/components/schemas/userUUID"

    chatUUID_path:
      name: chatUUID
      description: UUID of the chat
      example: "83ff0131-25ca-4583-9b9d-e3900039b17d"
      in: path
      required: true
      schema:
        $ref: "#/components/schemas/chatUUID"

    userName:
      name: userName
      description: user name
      example: "someone"
      in: query
      required: true
      schema:
        $ref: "#/components/schemas/userName"

    userHash:
      name: userHash
      description: hash of user password
      example: "9da94a0d0924c1664d09acf6228f965fe0d8be1b9941f06d634e52db0e23414b"
      in: query
      required: true
      schema:
        type: string

    chatUUID:
      name: chatUUID
      description: UUID of the chat
      example: "83ff0131-25ca-4583-9b9d-e3900039b17d"
      in: query
      required: true
      schema:
        $ref: "#/components/schemas/chatUUID"

    userUUID:
      name: userUUID
      description: UUID of the user
      example: "83ff0131-25ca-4583-9b9d-e3900039b17d"
      in: query
      required: true
      schema:
        $ref: "#/components/schemas/userUUID"

    authUserUUID:
      name: authUserUUID
      description: UUID of the user
      example: "83ff0131-25ca-4583-9b9d-e3900039b17d"
      in: query
      required: true
      schema:
        $ref: "#/components/schemas/userUUID"

    limit:
      name: limit
      description: Limit of the list
      example: 10
      in: query
      required: true
      schema:
        type: integer

    offset:
      name: offset
      description: Offset of the list
      example: 0
      in: query
      required: true
      schema:
        type: integer

  headers:
    Set-JWT:
      schema:
        type: string
        description: JWT token
        example: "jwt=tokenValue; Path=/; HttpOnly; Secure"
    Clear-JWT:
      schema:
        type: string
        description: JWT token clear
        example: "jwt=; Expires=Thu, 01 Jan 1970 00:00:00 GMT; Path=/;"
    HomeRedirect:
      schema:
        type: string
        description: Home redirect
        example: /
    LoginRedirect:
      schema:
        type: string
        description: Login redirect
        example: /auth/login

  responses:
    UnauthorizedLoginError:
      description: Unauthorized login
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    UnauthorizedError:
      description: Unauthorized access
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    AuthorizationSuccess:
      description: OK
      headers:
        Set-Cookie:
          $ref: "#/components/headers/Set-JWT"
        Location:
          $ref: "#/components/headers/HomeRedirect"
    UnauthorizationSuccess:
      description: OK
      headers:
        Set-Cookie:
          $ref: "#/components/headers/Clear-JWT"
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    NotAcceptable:
      description: Not Acceptable
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"

paths:
  /auth:
    post:
      summary: Register auth record
      description: if userService return userUUID
      tags:
        - auth
      parameters:
        - $ref: "#/components/parameters/userHash"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "400":
          $ref: "#/components/responses/BadRequest"
        "200":
          description: Successful registration
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"

    get:
      summary: Login
      description: if userName valid
      tags:
        - auth
      parameters:
        - $ref: "#/components/parameters/userName"
        - $ref: "#/components/parameters/userHash"
      responses:
        "400":
          $ref: "#/components/responses/BadRequest"
        "200":
          $ref: "#/components/responses/AuthorizationSuccess"

    delete:
      summary: Logout
      description: delete JWT
      tags:
        - auth
      responses:
        "200":
          $ref: "#/components/responses/UnauthorizationSuccess"

  /users:
    post:
      tags:
        - users-groups
      summary: Create new user
      description: if userUUID not exists
      requestBody:
        required: true
        content:
          application/json:
            example: { "id": null, "name": "User name", "phone": "+1234567890" }
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "406":
          $ref: "#/components/responses/NotAcceptable"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "201":
          description: Successful registration
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"

    put:
      summary: Update user
      description: if authUserUUID valid
      tags:
        - users-groups
      parameters:
        - $ref: "#/components/parameters/authUserUUID"
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "406":
          $ref: "#/components/responses/NotAcceptable"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "400":
          $ref: "#/components/responses/BadRequest"
        "202":
          description: Accepted

    delete:
      summary: Delete user
      description: if authUserUUID valid
      tags:
        - users-groups
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/authUserUUID"
      responses:
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "400":
          $ref: "#/components/responses/BadRequest"
        "200":
          description: OK
          headers:
            Location:
              $ref: "#/components/headers/Clear-JWT"

    get:
      summary: Get user info by username
      description: if username exists
      tags:
        - users-groups
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/authUserUUID"
        - $ref: "#/components/parameters/userName"
      responses:
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "400":
          $ref: "#/components/responses/BadRequest"
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"

  /users/{userUUID}:
    get:
      summary: Get user info by UUID
      description: if userUUID exists
      tags:
        - users-groups
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/userUUID_path"
        - $ref: "#/components/parameters/authUserUUID"
      responses:
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "400":
          $ref: "#/components/responses/BadRequest"
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"

  /chats:
    get:
      summary: Get list and chats info
      description: if authUserUUID valid
      tags:
        - users-groups
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/authUserUUID"
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/offset"
      responses:
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "400":
          $ref: "#/components/responses/BadRequest"
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  description: list of chat IDs
                  properties:
                    chatName:
                      type: string
                      example: "Pedro"
                    chat:
                      $ref: "#/components/schemas/Chat"

  /chats/private:
    post:
      summary: Create new private chat
      description: if userUUID exists
      tags:
        - users-groups
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/authUserUUID"
        - $ref: "#/components/parameters/userUUID"
      responses:
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "400":
          $ref: "#/components/responses/BadRequest"
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Chat"

    delete:
      summary: Delete authUserUUID from chat
      description: if authUserUUID in private chat
      tags:
        - users-groups
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/authUserUUID"
        - $ref: "#/components/parameters/chatUUID"
      responses:
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "400":
          $ref: "#/components/responses/BadRequest"
        "200":
          description: OK

  /chats/groups:
    get:
      summary: Get list of owned group
      description: if authUserUUID owner
      tags:
        - users-groups
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/authUserUUID"
      responses:
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "400":
          $ref: "#/components/responses/BadRequest"
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Group"

    post:
      summary: Create group and chat
      description: if authUserUUID exists
      tags:
        - users-groups
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/authUserUUID"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Group"
      responses:
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "400":
          $ref: "#/components/responses/BadRequest"
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Group"

  /chats/groups/{chatUUID}:
    get:
      summary: Get group info
      description: if authUserUUID in chat
      tags:
        - users-groups
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/chatUUID_path"
        - $ref: "#/components/parameters/authUserUUID"
      responses:
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "400":
          $ref: "#/components/responses/BadRequest"
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Group"

    put:
      summary: Update group
      description: if authUserUUID owner
      tags:
        - users-groups
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/chatUUID_path"
        - $ref: "#/components/parameters/authUserUUID"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Group"
      responses:
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "400":
          $ref: "#/components/responses/BadRequest"
        "200":
          description: OK

    delete:
      summary: Delete group and chat
      description: if authUserUUID owner
      tags:
        - users-groups
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/chatUUID_path"
        - $ref: "#/components/parameters/authUserUUID"
      responses:
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "400":
          $ref: "#/components/responses/BadRequest"
        "200":
          description: OK

  /chats/groups/{chatUUID}/members:
    post:
      summary: Add user to group
      description: if authUserUUID owner and userUUID exists
      tags:
        - users-groups
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/chatUUID_path"
        - $ref: "#/components/parameters/authUserUUID"
        - $ref: "#/components/parameters/userUUID"
      responses:
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "400":
          $ref: "#/components/responses/BadRequest"
        "200":
          description: OK

    get:
      summary: Get list of owned group
      description: if authUserUUID in chat
      tags:
        - users-groups
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/chatUUID_path"
        - $ref: "#/components/parameters/authUserUUID"
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/offset"
      responses:
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "400":
          $ref: "#/components/responses/BadRequest"
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"

    delete:
      summary: Delete the user from chat or leave
      description: if authUserUUID owner or member
      tags:
        - users-groups
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/chatUUID_path"
        - $ref: "#/components/parameters/authUserUUID"
        - $ref: "#/components/parameters/userUUID"
      responses:
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "400":
          $ref: "#/components/responses/BadRequest"
        "200":
          description: OK

  /messages:
    post:
      summary: Send message
      description: if authUserUUID in chat
      tags:
        - messages
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/authUserUUID"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Message"
      responses:
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "400":
          $ref: "#/components/responses/BadRequest"
        "200":
          description: OK

    put:
      summary: Edit message
      description: if authUserUUID in chat
      tags:
        - messages
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/authUserUUID"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Message"
      responses:
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "400":
          $ref: "#/components/responses/BadRequest"
        "200":
          description: OK

    delete:
      summary: Delete message
      description: if authUserUUID in chat
      tags:
        - messages
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/authUserUUID"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MessageId"
      responses:
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "400":
          $ref: "#/components/responses/BadRequest"
        "200":
          description: OK

    get:
      summary: Get messages
      description: if authUserUUID in chat
      tags:
        - messages
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/authUserUUID"
        - $ref: "#/components/parameters/chatUUID"
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/offset"
      responses:
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "400":
          $ref: "#/components/responses/BadRequest"
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Message"
