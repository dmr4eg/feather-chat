/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package nss.be.messages.apis

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import nss.be.messages.model.ChatsGet200ResponseInner
import nss.be.messages.model.Error

import com.squareup.moshi.Json

import nss.be.messages.infrastructure.ApiClient
import nss.be.messages.infrastructure.ApiResponse
import nss.be.messages.infrastructure.ClientException
import nss.be.messages.infrastructure.ClientError
import nss.be.messages.infrastructure.ServerException
import nss.be.messages.infrastructure.ServerError
import nss.be.messages.infrastructure.MultiValueMap
import nss.be.messages.infrastructure.PartConfig
import nss.be.messages.infrastructure.RequestConfig
import nss.be.messages.infrastructure.RequestMethod
import nss.be.messages.infrastructure.ResponseType
import nss.be.messages.infrastructure.Success
import nss.be.messages.infrastructure.toMultiValue

class UsersGroupsApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "http://localhost:8080")
        }
    }

    /**
     * Get list and chats info
     * if authUserUUID valid
     * @param authUserUUID UUID of the user
     * @param limit Limit of the list
     * @param offset Offset of the list
     * @return kotlin.collections.List<ChatsGet200ResponseInner>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun chatsGet(authUserUUID: java.util.UUID, limit: kotlin.Int, offset: kotlin.Int) : kotlin.collections.List<ChatsGet200ResponseInner> {
        val localVarResponse = chatsGetWithHttpInfo(authUserUUID = authUserUUID, limit = limit, offset = offset)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<ChatsGet200ResponseInner>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get list and chats info
     * if authUserUUID valid
     * @param authUserUUID UUID of the user
     * @param limit Limit of the list
     * @param offset Offset of the list
     * @return ApiResponse<kotlin.collections.List<ChatsGet200ResponseInner>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun chatsGetWithHttpInfo(authUserUUID: java.util.UUID, limit: kotlin.Int, offset: kotlin.Int) : ApiResponse<kotlin.collections.List<ChatsGet200ResponseInner>?> {
        val localVariableConfig = chatsGetRequestConfig(authUserUUID = authUserUUID, limit = limit, offset = offset)

        return request<Unit, kotlin.collections.List<ChatsGet200ResponseInner>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation chatsGet
     *
     * @param authUserUUID UUID of the user
     * @param limit Limit of the list
     * @param offset Offset of the list
     * @return RequestConfig
     */
    fun chatsGetRequestConfig(authUserUUID: java.util.UUID, limit: kotlin.Int, offset: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("authUserUUID", listOf(authUserUUID.toString()))
                put("limit", listOf(limit.toString()))
                put("offset", listOf(offset.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/chats",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
